<?php

namespace App\Filament\Auth;
use App\Models\Customer;
use Filament\Facades\Filament;
use Filament\Forms\Components\Component;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Http\Responses\Auth\Contracts\RegistrationResponse;
use Filament\Notifications\Auth\VerifyEmail;
use Filament\Pages\Auth\Register as BaseRegister;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Model;

class Register extends BaseRegister
{
    public $tid;
    public function mount(): void
    {
        $this->tid = request()->get('tid');
        parent::mount(); // TODO: Change the autogenerated stub
    }

    protected function getForms(): array
    {
        return [
            'form' => $this->form(
                $this->makeForm()
                    ->schema([
                        $this->getNameFormComponent(),
                        $this->getPhoneNumberFormComponent(),
                        $this->getPasswordFormComponent(),
                        $this->getPasswordConfirmationFormComponent(),
                    ])
                    ->statePath('data'),
            ),
        ];
    }

    protected function getPhoneNumberFormComponent(): Component
    {
        return TextInput::make('phone_number')
            ->label(__('general.contact.phone_number'))
            ->required()
            ->maxLength(255)
            ->unique($this->getUserModel());
    }
    protected function handleRegistration(array $data): Model
    {
        $user = $this->getUserModel()::create($data);
        $user->assignRole('user');
        if(!empty($this->tid)){
            $customers = Customer::where('id',$this->tid)->get();
            foreach($customers as $customer){
                $customer->user_id=$user->id;
                $customer->save();
            }
        }
        return $user;
    }

    protected function sendTelegramVerificationNotification(Model $user): void
    {
        if (! $user instanceof MustVerifyAccount) {
            return;
        }

        if ($user->hasVerifiedEmail()) {
            return;
        }

        if (! method_exists($user, 'notify')) {
            $userClass = $user::class;

            throw new Exception("Model [{$userClass}] does not have a [notify()] method.");
        }

        $notification = app(VerifyEmail::class);
        $notification->url = Filament::getVerifyEmailUrl($user);

        $user->notify($notification);
    }
}
